name: release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
  fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
    target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      - name: Package
        shell: bash
        run: |
          set -euo pipefail
          NAME=$(grep '^name' Cargo.toml | sed -E 's/name\s*=\s*"([^"]+)"/\1/' | tr -d '\r')
          VER=$(grep '^version' Cargo.toml | sed -E 's/version\s*=\s*"([^"]+)"/\1/' | tr -d '\r')
          DIST=dist
          mkdir -p "$DIST"
          BIN="target/${{ matrix.target }}/release/$NAME"
          if [[ "${{ matrix.os }}" == windows-latest ]]; then BIN+=".exe"; fi
          OUTDIR="$DIST/$NAME-$VER-${{ matrix.target }}"
          mkdir -p "$OUTDIR"
          cp "$BIN" "$OUTDIR/"
          [ -f README.md ] && cp README.md "$OUTDIR/"
          [ -f LICENSE ] && cp LICENSE "$OUTDIR/"
          if [[ "${{ matrix.os }}" == windows-latest ]]; then
            7z a "$DIST/$NAME-$VER-${{ matrix.target }}.zip" "$OUTDIR" >/dev/null
          else
            tar -czf "$DIST/$NAME-$VER-${{ matrix.target }}.tar.gz" -C "$DIST" "$(basename "$OUTDIR")"
          fi
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
