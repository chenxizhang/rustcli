name: release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      - name: Package (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $NAME = (Select-String -Path Cargo.toml -Pattern '^name\s*=\s*"([^"]+)"').Matches.Groups[1].Value
          $VER = (Select-String -Path Cargo.toml -Pattern '^version\s*=\s*"([^"]+)"').Matches.Groups[1].Value
          $DIST = 'dist'
          New-Item -ItemType Directory -Path $DIST -Force | Out-Null
          $BIN = "target/${{ matrix.target }}/release/$NAME.exe"
          $OUTDIR = Join-Path $DIST "$NAME-$VER-${{ matrix.target }}"
          New-Item -ItemType Directory -Path $OUTDIR -Force | Out-Null
          Copy-Item $BIN "$OUTDIR/"
          if (Test-Path README.md) { Copy-Item README.md "$OUTDIR/" }
          if (Test-Path LICENSE) { Copy-Item LICENSE "$OUTDIR/" }
          $zip = Join-Path $DIST "$NAME-$VER-${{ matrix.target }}.zip"
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path $OUTDIR -DestinationPath $zip
          # Clean temp directory to avoid uploading raw files
          Remove-Item -Recurse -Force $OUTDIR
      
      - name: Package (Unix)
        if: ${{ matrix.os != 'windows-latest' }}
        shell: bash
        run: |
          set -euo pipefail
          NAME=$(sed -n -E 's/^name[[:space:]]*=[[:space:]]*"([^"]+)".*/\1/p' Cargo.toml | head -n 1 | tr -d '\r')
          VER=$(sed -n -E 's/^version[[:space:]]*=[[:space:]]*"([^"]+)".*/\1/p' Cargo.toml | head -n 1 | tr -d '\r')
          if [[ -z "$NAME" || -z "$VER" ]]; then echo "Failed to parse name/version from Cargo.toml" >&2; exit 1; fi
          echo "Packaging $NAME $VER for ${{ matrix.target }}"
          DIST=dist
          mkdir -p "$DIST"
          BIN="target/${{ matrix.target }}/release/$NAME"
          OUTDIR="$DIST/$NAME-$VER-${{ matrix.target }}"
          mkdir -p "$OUTDIR"
          cp "$BIN" "$OUTDIR/"
          [ -f README.md ] && cp README.md "$OUTDIR/"
          [ -f LICENSE ] && cp LICENSE "$OUTDIR/"
          tar -czf "$DIST/$NAME-$VER-${{ matrix.target }}.tar.gz" -C "$DIST" "$(basename "$OUTDIR")"
          # Clean temp directory to avoid uploading raw files
          rm -rf "$OUTDIR"
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: |
            dist/*.zip
            dist/*.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: Create Release
        uses: softprops/action-gh-release@v2.3.2
        continue-on-error: true
        with:
          files: |
            dist/*.zip
            dist/*.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
